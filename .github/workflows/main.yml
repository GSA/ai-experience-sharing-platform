# This is a basic workflow to help you get started with Actions

name: Build and deploy to CF

on:
  push:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: cms

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      CF_USER: ${{ secrets.DEV_CF_USER }}
      CF_PASSWORD: ${{ secrets.DEV_CF_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Cache node_modules
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: cms/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('cms/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Strapi
        run: npm run build
        env:
          NODE_ENV: production

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.4

      - name: Terraform Init
        run: terraform init -input=false deployment/terraform

      # - name: Terraform Format
      #   run: terraform fmt -check deployment/terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color deployment/terraform

      - name: Create Plan Comment
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          STDOUT: "```${{ steps.plan.outputs.stdout }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDOUT
            })
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve deployment/terraform
